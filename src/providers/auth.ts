import type { AuthProvider } from "@refinedev/core";
import { API_URL, dataProvider } from "./data";

/**
 * For demo purposes and to make it easier to test the app, you can use the following credentials:
 */
export const authCredentials = {
  email: "michael.scott@dundermifflin.com",
  password: "demodemo",
};

export const authProvider: AuthProvider = {
    // login function is used to log the user in. It makes a request to the server to log the user in. If the user is successfully logged in, the access token is stored in the local storage. If the user is not successfully logged in, an error is returned to the user.
    login: async ({ email }) => {
        try {
        // call the login mutation
        // dataProvider.custom is used to make  a custom request to the GraphQL API.
        // this will call dataProvider which will go through the fetchWrapper function and then call the customFetch function to make the request.
        const { data } = await dataProvider.custom({
            url: API_URL,
            method: "post",
            headers: {},
            meta: {
            // pass the email to see if the user exists and if so, return the accessToken
            variables: { email },
            // rawQuery is used to pass the GraphQL
            rawQuery: `
                    mutation Login($email: String!) {
                        login(loginInput: {
                        email: $email
                        }) {
                        accessToken,
                        }
                    }
                    `,
            },
        });

        localStorage.setItem("access_token", data.login.accessToken);

        return {
            success: true,
            redirectTo: "/",
        };
        } catch (e) {
        const error = e as Error;

        return {
            success: false,
            error: {
            message: "message" in error ? error.message : "Login failed",
            name: "name" in error ? error.name : "Invalid email or password",
            },
        };
        }
    },

    // logout function is used to remove the access token from the local storage when the user logs out.
    logout: async () => {
        localStorage.removeItem("access_token");

        return {
        success: true,
        redirectTo: "/login",
        };
    },

    // onError function is used to handle the errors returned by the server. If the error is UNAUTHENTICATED, it means that the user is not authenticated and the user should be redirected to the login page. If the error is not UNAUTHENTICATED, the error is returned to the user.
    onError: async (error) => {
        if (error.statusCode === "UNAUTHENTICATED") {
        return {
            logout: true,
        };
        }

        return { error };
    },

    // check function is used to check if the user is authenticated. It makes a request to the server to check if the user is authenticated. If the user is authenticated, the user is redirected to the home page. If the user is not authenticated, the user is redirected to the login page.
    check: async () => {
        try {
        // get the identify of the user
        // this is to know if the user is authenticated or not
        await dataProvider.custom({
            url: API_URL,
            method: "post",
            headers: {},
            meta: {
            rawQuery: `
                        query Me {
                            me {
                            name
                            }
                        }
                    `,
            },
        });

        // if the user is authenticated, redirect to the home page
        return {
            authenticated: true,
            redirectTo: "/",
        };
        } catch (error) {
        // if the user is not authenticated, redirect to the login page
        return {
            authenticated: false,
            redirectTo: "/login",
        };
        }
    },

    // getIdentity function is used to get the user's identity. It makes a request to the server to get the user's identity. If the user is authenticated, the user's identity is returned. If the user is not authenticated, undefined is returned.
    getIdentity: async () => {
        const accessToken = localStorage.getItem("access_token");

        try {
        // call the GraphQL API to get the user information
        // we are using me:any because the GraphQL API does not have a type for the me query in the schema.
        // we'll add some queries and mutations later and change this is User which will be generated by the codegen
        const { data } = await dataProvider.custom<{ me: any }>({
            url: API_URL,
            method: "post",
            headers: accessToken
            ? {
                // add the access token to the headers
                Authorization: `Bearer ${accessToken}`,
                }
            : {},
            meta: {
            // get the user information such as name, email, phone, jobTitle, timezone, and avatarUrl
            rawQuery: `
                        query Me {
                            me {
                                id,
                                name,
                                email,
                                phone,
                                jobTitle,
                                timezone
                                avatarUrl
                            }
                        }
                    `,
            },
        });

        return data.me;
        } catch (error) {
        return undefined;
        }
    },
};